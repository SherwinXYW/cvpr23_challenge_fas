# -*- coding: UTF-8 -*-
################################################################################
#
# Copyright (c) 2022 Chinatelecom.cn, Inc. All Rights Reserved
#
################################################################################
"""
本文件自定义的MobileNetV1结构,业务场景使用模型

Authors: zouzhaofan(zouzhf41@chinatelecom.cn)
Date:    2021/12/06 18:23:09
"""

import torch
import torch.nn as nn


class MobileNet145(nn.Module):
    """MobileNetV1_145 model"""
    def __init__(self,
                 num_classes=2,
                 pretrained=True,
                 features_only=False):
        super(MobileNet145, self).__init__()
        self.features_only = features_only
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=2, padding=1, groups=1, bias=False)
        self.conv1_bn = nn.BatchNorm2d(32, affine=True, eps=1e-05, momentum=0.1)
        self.relu1 = nn.ReLU(inplace=True)
        self.conv2_1_dw = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1, groups=32, bias=False)
        self.conv2_1_dw_bn = nn.BatchNorm2d(32, affine=True, eps=1e-05, momentum=0.1)
        self.relu2_1_dw = nn.ReLU(inplace=True)
        self.conv2_1_sep = nn.Conv2d(32, 64, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv2_1_sep_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu2_1_sep = nn.ReLU(inplace=True)
        self.conv2_2_dw = nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1, groups=64, bias=False)
        self.conv2_2_dw_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu2_2_dw = nn.ReLU(inplace=True)
        self.conv2_2_sep = nn.Conv2d(64, 64, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv2_2_sep_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu2_2_sep = nn.ReLU(inplace=True)
        self.conv3_1_dw = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=64, bias=False)
        self.conv3_1_dw_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu3_1_dw = nn.ReLU(inplace=True)
        self.conv3_1_sep = nn.Conv2d(64, 64, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv3_1_sep_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu3_1_sep = nn.ReLU(inplace=True)
        self.conv3_2_dw = nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1, groups=64, bias=False)
        self.conv3_2_dw_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu3_2_dw = nn.ReLU(inplace=True)
        self.conv3_2_sep = nn.Conv2d(64, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv3_2_sep_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05, momentum=0.1)
        self.relu3_2_sep = nn.ReLU(inplace=True)
        self.conv4_1_dw = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, groups=128, bias=False)
        self.conv4_1_dw_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05, momentum=0.1)
        self.relu4_1_dw = nn.ReLU(inplace=True)
        self.conv4_1_sep = nn.Conv2d(128, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv4_1_sep_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05, momentum=0.1)
        self.relu4_1_sep = nn.ReLU(inplace=True)
        self.conv4_2_dw = nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1, groups=128, bias=False)
        self.conv4_2_dw_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05, momentum=0.1)
        self.relu4_2_dw = nn.ReLU(inplace=True)
        self.conv4_2_sep = nn.Conv2d(128, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv4_2_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu4_2_sep = nn.ReLU(inplace=True)
        self.conv5_1_dw = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv5_1_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_1_dw = nn.ReLU(inplace=True)
        self.conv5_1_sep = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_1_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_1_sep = nn.ReLU(inplace=True)
        self.conv5_2_dw = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv5_2_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_2_dw = nn.ReLU(inplace=True)
        self.conv5_2_sep = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_2_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_2_sep = nn.ReLU(inplace=True)
        self.conv5_3_dw = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv5_3_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_3_dw = nn.ReLU(inplace=True)
        self.conv5_3_sep = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_3_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_3_sep = nn.ReLU(inplace=True)
        self.conv5_4_dw = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv5_4_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_4_dw = nn.ReLU(inplace=True)
        self.conv5_4_sep = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_4_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_4_sep = nn.ReLU(inplace=True)
        self.conv5_5_dw = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv5_5_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_5_dw = nn.ReLU(inplace=True)
        self.conv5_5_sep = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_5_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_5_sep = nn.ReLU(inplace=True)
        self.conv5_6_dw = nn.Conv2d(256, 256, kernel_size=3, stride=2, padding=1, groups=256, bias=False)
        self.conv5_6_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_6_dw = nn.ReLU(inplace=True)
        self.conv5_6_sep_3 = nn.Conv2d(256, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_6_sep_bn_3 = nn.BatchNorm2d(128, affine=True, eps=1e-05, momentum=0.1)
        self.relu5_6_sep = nn.ReLU(inplace=True)
        self.conv6_dw_3 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, groups=128, bias=False)
        self.conv6_dw_bn_3 = nn.BatchNorm2d(128, affine=True, eps=1e-05, momentum=0.1)
        self.relu6_dw = nn.ReLU(inplace=True)
        self.conv6_sep_3 = nn.Conv2d(128, 64, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv6_sep_bn_2 = nn.BatchNorm2d(64, affine=True, eps=1e-05, momentum=0.1)
        self.relu6_sep = nn.ReLU(inplace=True)
        self.pool6 = nn.AdaptiveAvgPool2d(1)
        self.fc7_3 = nn.Conv2d(64, num_classes, kernel_size=1, stride=1, padding=0, groups=1, bias=True)

    def forward_features(self, img):
        """features forward"""
        conv1 = self.conv1(img)
        conv1 = self.conv1_bn(conv1)
        conv1 = self.relu1(conv1)
        conv2_1_dw = self.conv2_1_dw(conv1)
        conv2_1_dw = self.conv2_1_dw_bn(conv2_1_dw)
        conv2_1_dw = self.relu2_1_dw(conv2_1_dw)
        conv2_1_sep = self.conv2_1_sep(conv2_1_dw)
        conv2_1_sep = self.conv2_1_sep_bn(conv2_1_sep)
        conv2_1_sep = self.relu2_1_sep(conv2_1_sep)
        conv2_2_dw = self.conv2_2_dw(conv2_1_sep)
        conv2_2_dw = self.conv2_2_dw_bn(conv2_2_dw)
        conv2_2_dw = self.relu2_2_dw(conv2_2_dw)
        conv2_2_sep = self.conv2_2_sep(conv2_2_dw)
        conv2_2_sep = self.conv2_2_sep_bn(conv2_2_sep)
        conv2_2_sep = self.relu2_2_sep(conv2_2_sep)
        conv3_1_dw = self.conv3_1_dw(conv2_2_sep)
        conv3_1_dw = self.conv3_1_dw_bn(conv3_1_dw)
        conv3_1_dw = self.relu3_1_dw(conv3_1_dw)
        conv3_1_sep = self.conv3_1_sep(conv3_1_dw)
        conv3_1_sep = self.conv3_1_sep_bn(conv3_1_sep)
        conv3_1_sep = self.relu3_1_sep(conv3_1_sep)
        conv3_2_dw = self.conv3_2_dw(conv3_1_sep)
        conv3_2_dw = self.conv3_2_dw_bn(conv3_2_dw)
        conv3_2_dw = self.relu3_2_dw(conv3_2_dw)
        conv3_2_sep = self.conv3_2_sep(conv3_2_dw)
        conv3_2_sep = self.conv3_2_sep_bn(conv3_2_sep)
        conv3_2_sep = self.relu3_2_sep(conv3_2_sep)
        conv4_1_dw = self.conv4_1_dw(conv3_2_sep)
        conv4_1_dw = self.conv4_1_dw_bn(conv4_1_dw)
        conv4_1_dw = self.relu4_1_dw(conv4_1_dw)
        conv4_1_sep = self.conv4_1_sep(conv4_1_dw)
        conv4_1_sep = self.conv4_1_sep_bn(conv4_1_sep)
        conv4_1_sep = self.relu4_1_sep(conv4_1_sep)
        conv4_2_dw = self.conv4_2_dw(conv4_1_sep)
        conv4_2_dw = self.conv4_2_dw_bn(conv4_2_dw)
        conv4_2_dw = self.relu4_2_dw(conv4_2_dw)
        conv4_2_sep = self.conv4_2_sep(conv4_2_dw)
        conv4_2_sep = self.conv4_2_sep_bn(conv4_2_sep)
        conv4_2_sep = self.relu4_2_sep(conv4_2_sep)
        conv5_1_dw = self.conv5_1_dw(conv4_2_sep)
        conv5_1_dw = self.conv5_1_dw_bn(conv5_1_dw)
        conv5_1_dw = self.relu5_1_dw(conv5_1_dw)
        conv5_1_sep = self.conv5_1_sep(conv5_1_dw)
        conv5_1_sep = self.conv5_1_sep_bn(conv5_1_sep)
        conv5_1_sep = self.relu5_1_sep(conv5_1_sep)
        conv5_2_dw = self.conv5_2_dw(conv5_1_sep)
        conv5_2_dw = self.conv5_2_dw_bn(conv5_2_dw)
        conv5_2_dw = self.relu5_2_dw(conv5_2_dw)
        conv5_2_sep = self.conv5_2_sep(conv5_2_dw)
        conv5_2_sep = self.conv5_2_sep_bn(conv5_2_sep)
        conv5_2_sep = self.relu5_2_sep(conv5_2_sep)
        conv5_3_dw = self.conv5_3_dw(conv5_2_sep)
        conv5_3_dw = self.conv5_3_dw_bn(conv5_3_dw)
        conv5_3_dw = self.relu5_3_dw(conv5_3_dw)
        conv5_3_sep = self.conv5_3_sep(conv5_3_dw)
        conv5_3_sep = self.conv5_3_sep_bn(conv5_3_sep)
        conv5_3_sep = self.relu5_3_sep(conv5_3_sep)
        conv5_4_dw = self.conv5_4_dw(conv5_3_sep)
        conv5_4_dw = self.conv5_4_dw_bn(conv5_4_dw)
        conv5_4_dw = self.relu5_4_dw(conv5_4_dw)
        conv5_4_sep = self.conv5_4_sep(conv5_4_dw)
        conv5_4_sep = self.conv5_4_sep_bn(conv5_4_sep)
        conv5_4_sep = self.relu5_4_sep(conv5_4_sep)
        conv5_5_dw = self.conv5_5_dw(conv5_4_sep)
        conv5_5_dw = self.conv5_5_dw_bn(conv5_5_dw)
        conv5_5_dw = self.relu5_5_dw(conv5_5_dw)
        conv5_5_sep = self.conv5_5_sep(conv5_5_dw)
        conv5_5_sep = self.conv5_5_sep_bn(conv5_5_sep)
        conv5_5_sep = self.relu5_5_sep(conv5_5_sep)
        conv5_6_dw = self.conv5_6_dw(conv5_5_sep)
        conv5_6_dw = self.conv5_6_dw_bn(conv5_6_dw)
        conv5_6_dw = self.relu5_6_dw(conv5_6_dw)
        conv5_6_sep = self.conv5_6_sep_3(conv5_6_dw)
        conv5_6_sep = self.conv5_6_sep_bn_3(conv5_6_sep)
        conv5_6_sep = self.relu5_6_sep(conv5_6_sep)
        conv6_dw = self.conv6_dw_3(conv5_6_sep)
        conv6_dw = self.conv6_dw_bn_3(conv6_dw)
        conv6_dw = self.relu6_dw(conv6_dw)
        conv6_sep = self.conv6_sep_3(conv6_dw)
        conv6_sep = self.conv6_sep_bn_2(conv6_sep)
        out = self.relu6_sep(conv6_sep)
        return out

    def forward(self, img):
        """forward"""
        out = self.forward_features(img)
        if self.features_only:
            return out
        out = self.pool6(out)
        out = self.fc7_3(out)
        out = out.squeeze(3).squeeze(2)

        return out


class MobileNet1201(nn.Module):
    """MobileNetV1_1201 model"""
    def __init__(self,
                 num_classes=2,
                 pretrained=True,
                 features_only=False):
        super(MobileNet1201, self).__init__()
        self.features_only=features_only
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1, groups=1, bias=False)
        self.conv1_bn = nn.BatchNorm2d(32, affine=True, eps=1e-05)
        self.relu1 = nn.ReLU(inplace=True)
        self.conv2_1_dw = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1, groups=32, bias=False)
        self.conv2_1_dw_bn = nn.BatchNorm2d(32, affine=True, eps=1e-05)
        self.relu2_1_dw = nn.ReLU(inplace=True)
        self.conv2_1_sep = nn.Conv2d(32, 64, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv2_1_sep_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05)
        self.relu2_1_sep = nn.ReLU(inplace=True)
        self.conv2_2_dw = nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1, groups=64, bias=False)
        self.conv2_2_dw_bn = nn.BatchNorm2d(64, affine=True, eps=1e-05)
        self.relu2_2_dw = nn.ReLU(inplace=True)
        self.conv2_2_sep = nn.Conv2d(64, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv2_2_sep_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu2_2_sep = nn.ReLU(inplace=True)
        self.conv3_1_dw = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, groups=128, bias=False)
        self.conv3_1_dw_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu3_1_dw = nn.ReLU(inplace=True)
        self.conv3_1_sep = nn.Conv2d(128, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv3_1_sep_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu3_1_sep = nn.ReLU(inplace=True)
        self.conv3_2_dw = nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1, groups=128, bias=False)
        self.conv3_2_dw_bn = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu3_2_dw = nn.ReLU(inplace=True)
        self.conv3_2_sep = nn.Conv2d(128, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv3_2_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05)
        self.relu3_2_sep = nn.ReLU(inplace=True)
        self.conv4_1_dw = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv4_1_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05)
        self.relu4_1_dw = nn.ReLU(inplace=True)
        self.conv4_1_sep = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv4_1_sep_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05)
        self.relu4_1_sep = nn.ReLU(inplace=True)
        self.conv4_2_dw = nn.Conv2d(256, 256, kernel_size=3, stride=2, padding=1, groups=256, bias=False)
        self.conv4_2_dw_bn = nn.BatchNorm2d(256, affine=True, eps=1e-05)
        self.relu4_2_dw = nn.ReLU(inplace=True)
        self.conv4_2_sep = nn.Conv2d(256, 512, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv4_2_sep_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu4_2_sep = nn.ReLU(inplace=True)
        self.conv5_1_dw = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, groups=512, bias=False)
        self.conv5_1_dw_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_1_dw = nn.ReLU(inplace=True)
        self.conv5_1_sep = nn.Conv2d(512, 512, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_1_sep_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_1_sep = nn.ReLU(inplace=True)
        self.conv5_2_dw = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, groups=512, bias=False)
        self.conv5_2_dw_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_2_dw = nn.ReLU(inplace=True)
        self.conv5_2_sep = nn.Conv2d(512, 512, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_2_sep_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_2_sep = nn.ReLU(inplace=True)
        self.conv5_3_dw = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, groups=512, bias=False)
        self.conv5_3_dw_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_3_dw = nn.ReLU(inplace=True)
        self.conv5_3_sep = nn.Conv2d(512, 512, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_3_sep_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_3_sep = nn.ReLU(inplace=True)
        self.conv5_4_dw = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, groups=512, bias=False)
        self.conv5_4_dw_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_4_dw = nn.ReLU(inplace=True)
        self.conv5_4_sep = nn.Conv2d(512, 512, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_4_sep_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_4_sep = nn.ReLU(inplace=True)
        self.conv5_5_dw = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, groups=512, bias=False)
        self.conv5_5_dw_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_5_dw = nn.ReLU(inplace=True)
        self.conv5_5_sep = nn.Conv2d(512, 512, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_5_sep_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_5_sep = nn.ReLU(inplace=True)
        self.conv5_6_dw = nn.Conv2d(512, 512, kernel_size=3, stride=2, padding=1, groups=512, bias=False)
        self.conv5_6_dw_bn = nn.BatchNorm2d(512, affine=True, eps=1e-05)
        self.relu5_6_dw = nn.ReLU(inplace=True)
        self.conv5_6_sep_3 = nn.Conv2d(512, 256, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv5_6_sep_bn_3 = nn.BatchNorm2d(256, affine=True, eps=1e-05)
        self.relu5_6_sep = nn.ReLU(inplace=True)
        self.conv6_dw_3 = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, groups=256, bias=False)
        self.conv6_dw_bn_3 = nn.BatchNorm2d(256, affine=True, eps=1e-05)
        self.relu6_dw = nn.ReLU(inplace=True)
        self.conv6_sep_3 = nn.Conv2d(256, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv6_sep_bn_2 = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu6_sep = nn.ReLU(inplace=True)
        self.conv6_1_dw_3 = nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1, groups=128, bias=False)
        self.conv6_1_dw_bn_3 = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu6_1_dw = nn.ReLU(inplace=True)
        self.conv6_1_sep_3 = nn.Conv2d(128, 128, kernel_size=1, stride=1, padding=0, groups=1, bias=False)
        self.conv6_1_sep_bn_2 = nn.BatchNorm2d(128, affine=True, eps=1e-05)
        self.relu6_1_sep = nn.ReLU(inplace=True)
        self.pool6 = nn.AdaptiveAvgPool2d(1)
        self.fc7_3 = nn.Conv2d(128, num_classes, kernel_size=1, stride=1, padding=0, groups=1, bias=True)

    def forward_features(self, img):
        """feature forward"""
        conv1 = self.conv1(img)
        conv1 = self.conv1_bn(conv1)
        conv1 = self.relu1(conv1)
        conv2_1_dw = self.conv2_1_dw(conv1)
        conv2_1_dw = self.conv2_1_dw_bn(conv2_1_dw)
        conv2_1_dw = self.relu2_1_dw(conv2_1_dw)
        conv2_1_sep = self.conv2_1_sep(conv2_1_dw)
        conv2_1_sep = self.conv2_1_sep_bn(conv2_1_sep)
        conv2_1_sep = self.relu2_1_sep(conv2_1_sep)
        conv2_2_dw = self.conv2_2_dw(conv2_1_sep)
        conv2_2_dw = self.conv2_2_dw_bn(conv2_2_dw)
        conv2_2_dw = self.relu2_2_dw(conv2_2_dw)
        conv2_2_sep = self.conv2_2_sep(conv2_2_dw)
        conv2_2_sep = self.conv2_2_sep_bn(conv2_2_sep)
        conv2_2_sep = self.relu2_2_sep(conv2_2_sep)
        conv3_1_dw = self.conv3_1_dw(conv2_2_sep)
        conv3_1_dw = self.conv3_1_dw_bn(conv3_1_dw)
        conv3_1_dw = self.relu3_1_dw(conv3_1_dw)
        conv3_1_sep = self.conv3_1_sep(conv3_1_dw)
        conv3_1_sep = self.conv3_1_sep_bn(conv3_1_sep)
        conv3_1_sep = self.relu3_1_sep(conv3_1_sep)
        conv3_2_dw = self.conv3_2_dw(conv3_1_sep)
        conv3_2_dw = self.conv3_2_dw_bn(conv3_2_dw)
        conv3_2_dw = self.relu3_2_dw(conv3_2_dw)
        conv3_2_sep = self.conv3_2_sep(conv3_2_dw)
        conv3_2_sep = self.conv3_2_sep_bn(conv3_2_sep)
        conv3_2_sep = self.relu3_2_sep(conv3_2_sep)
        conv4_1_dw = self.conv4_1_dw(conv3_2_sep)
        conv4_1_dw = self.conv4_1_dw_bn(conv4_1_dw)
        conv4_1_dw = self.relu4_1_dw(conv4_1_dw)
        conv4_1_sep = self.conv4_1_sep(conv4_1_dw)
        conv4_1_sep = self.conv4_1_sep_bn(conv4_1_sep)
        conv4_1_sep = self.relu4_1_sep(conv4_1_sep)
        conv4_2_dw = self.conv4_2_dw(conv4_1_sep)
        conv4_2_dw = self.conv4_2_dw_bn(conv4_2_dw)
        conv4_2_dw = self.relu4_2_dw(conv4_2_dw)
        conv4_2_sep = self.conv4_2_sep(conv4_2_dw)
        conv4_2_sep = self.conv4_2_sep_bn(conv4_2_sep)
        conv4_2_sep_relu = self.relu4_2_sep(conv4_2_sep)
        conv5_1_dw = self.conv5_1_dw(conv4_2_sep_relu)
        conv5_1_dw = self.conv5_1_dw_bn(conv5_1_dw)
        conv5_1_dw = self.relu5_1_dw(conv5_1_dw)
        conv5_1_sep = self.conv5_1_sep(conv5_1_dw)
        conv5_1_sep = self.conv5_1_sep_bn(conv5_1_sep)
        conv5_1_sep = self.relu5_1_sep(conv5_1_sep)
        conv5_2_dw = self.conv5_2_dw(conv5_1_sep)
        conv5_2_dw = self.conv5_2_dw_bn(conv5_2_dw)
        conv5_2_dw = self.relu5_2_dw(conv5_2_dw)
        conv5_2_sep = self.conv5_2_sep(conv5_2_dw)
        conv5_2_sep = self.conv5_2_sep_bn(conv5_2_sep)
        conv5_2_sep = self.relu5_2_sep(conv5_2_sep)
        conv5_3_dw = self.conv5_3_dw(conv5_2_sep)
        conv5_3_dw = self.conv5_3_dw_bn(conv5_3_dw)
        conv5_3_dw = self.relu5_3_dw(conv5_3_dw)
        conv5_3_sep = self.conv5_3_sep(conv5_3_dw)
        conv5_3_sep = self.conv5_3_sep_bn(conv5_3_sep)
        conv5_3_sep = self.relu5_3_sep(conv5_3_sep)
        conv5_4_dw = self.conv5_4_dw(conv5_3_sep)
        conv5_4_dw = self.conv5_4_dw_bn(conv5_4_dw)
        conv5_4_dw = self.relu5_4_dw(conv5_4_dw)
        conv5_4_sep = self.conv5_4_sep(conv5_4_dw)
        conv5_4_sep = self.conv5_4_sep_bn(conv5_4_sep)
        conv5_4_sep = self.relu5_4_sep(conv5_4_sep)
        conv5_5_dw = self.conv5_5_dw(conv5_4_sep)
        conv5_5_dw = self.conv5_5_dw_bn(conv5_5_dw)
        conv5_5_dw = self.relu5_5_dw(conv5_5_dw)
        conv5_5_sep = self.conv5_5_sep(conv5_5_dw)
        conv5_5_sep = self.conv5_5_sep_bn(conv5_5_sep)
        conv5_5_sep = self.relu5_5_sep(conv5_5_sep)
        conv5_6_dw = self.conv5_6_dw(conv5_5_sep)
        conv5_6_dw = self.conv5_6_dw_bn(conv5_6_dw)
        conv5_6_dw = self.relu5_6_dw(conv5_6_dw)
        conv5_6_sep = self.conv5_6_sep_3(conv5_6_dw)
        conv5_6_sep = self.conv5_6_sep_bn_3(conv5_6_sep)
        conv5_6_sep = self.relu5_6_sep(conv5_6_sep)
        conv6_dw = self.conv6_dw_3(conv5_6_sep)
        conv6_dw = self.conv6_dw_bn_3(conv6_dw)
        conv6_dw = self.relu6_dw(conv6_dw)
        conv6_sep = self.conv6_sep_3(conv6_dw)
        conv6_sep = self.conv6_sep_bn_2(conv6_sep)
        conv6_sep = self.relu6_sep(conv6_sep)
        conv6_1_dw = self.conv6_1_dw_3(conv6_sep)
        conv6_1_dw = self.conv6_1_dw_bn_3(conv6_1_dw)
        conv6_1_dw = self.relu6_1_dw(conv6_1_dw)
        conv6_1_sep = self.conv6_1_sep_3(conv6_1_dw)
        conv6_1_sep = self.conv6_1_sep_bn_2(conv6_1_sep)
        out = self.relu6_1_sep(conv6_1_sep)

        return out

    def forward(self, img):
        """forward"""
        out = self.forward_features(img)
        if self.features_only:
            return out
        out = self.pool6(out)
        out = self.fc7_3(out)
        out = out.squeeze(3).squeeze(2)
        return out


def mobilenetv1_145(pretrained=False, **kwargs):
    """Constructs a MobileNet145 model.
    """
    return MobileNet145(**kwargs)


def mobilenetv3_1201(pretrained=False, **kwargs):
    """Constructs a MobileNet1201 model.
    """
    return MobileNet1201(**kwargs)

